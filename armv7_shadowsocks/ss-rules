#!/bin/sh
#
# Copyright (C) 2016 DD-WRT
# Copyright (C) 2016 Jian Chang <aa65535@live.com> && Jason Lin <wojiaolinmu008@gmail.com>
# Main author: Jian Chang && Jason Lin
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

#debug
#set -x

IPT="/opt/sbin/iptables -t nat"
IPT_M="/opt/sbin/iptables -t mangle"
IPT_D="/usr/sbin/iptables -t nat"

usage() {
	cat <<-EOF
		Usage: ss-rules [options]

		Valid options are:

		    -s <server_ip>          ip address of shadowsocks remote server
		    -l <local_port>         port number of shadowsocks local server
		    -i <ip_list_file>       a file content is bypassed ip list
		    -a <lan_ips>            lan ip of access control, need a prefix to
		                            define access control mode
		    -b <wan_ips>            wan ip of will be bypassed
		    -w <wan_ips>            wan ip of will be forwarded
		    -e <extra_options>      extra options for iptables
		    -o                      apply the rules to the OUTPUT chain
		    -u                      enable udprelay mode, TPROXY is required
		    -G                      enable GFWLIST
		    -f                      flush the rules
		    -h                      show this help message and exit
EOF
	exit $1
}

loger() {
	# 1.alert 2.crit 3.err 4.warn 5.notice 6.info 7.debug
	logger -st ss-rules[$$] -p$1 $2
}

flush_r() {
	$IPT -F 2>/dev/null
	$IPT_M -F 2>/dev/null
	$IPT -X SS_SPEC_WAN_AC 2>/dev/null
	$IPT -X SS_SPEC_WAN_FW 2>/dev/null
	$IPT_M -X SS_SPEC_TPROXY 2>/dev/null	
	ip rule del fwmark 0x01/0x01 table 100 2>/dev/null
	ip route del local 0.0.0.0/0 dev lo table 100 2>/dev/null
	ipset -X ss_spec_lan_ac 2>/dev/null
	ipset -X ss_spec_wan_ac 2>/dev/null
	[ -f "/var/log/gfwlist.lock" ] && {
	local JSON="/opt/etc/shadowsocks.json"
	local PORT=`sed -n 's/.*l_port":\(.*\)/\1/p' $JSON | sed 's/,//g'`
	$IPT -D PREROUTING -p tcp -m set --match-set gfw_black_list dst \
		-j REDIRECT --to-port $PORT 2>/dev/null
	$IPT -D OUTPUT -p tcp -m set --match-set gfw_black_list dst \
		-j REDIRECT --to-port $PORT 2>/dev/null
	ipset -X gfw_black_list 2>/dev/null
}
	[ -f "/var/log/adbyby.lock" ] && {
	$IPT -X ADBYBY_AC 2>/dev/null
	$IPT -X ADBYBY_FW 2>/dev/null
	ipset -X adbyby_lan_ac 2>/dev/null
	ipset -X adbyby_wan_ac 2>/dev/null
	}
	restore_dnsamsq
	our_rule
	return 0
}

gfw_r() {
	if [ "$GFWLIST" = 1 ]; then
		ipset -N gfw_black_list hash:ip hashsize 65536
		local JSON="/opt/etc/shadowsocks.json"
		local PORT=`sed -n 's/.*l_port":\(.*\)/\1/p' $JSON | sed 's/,//g'`
		$IPT -A PREROUTING -p tcp -m set --match-set gfw_black_list dst \
			-j REDIRECT --to-port $PORT
		$IPT -A OUTPUT -p tcp -m set --match-set gfw_black_list dst \
			-j REDIRECT --to-port $PORT
		touch a /var/log/gfwlist.lock
	fi
}

our_rule() {
	###################### nat #########################
	$IPT_D -A PREROUTING -d `nvram get wan_ipaddr | sed -e 's;$;/32;'` -p icmp \
		-j DNAT --to-destination `nvram get lan_ipaddr` && \
	$IPT_D -A PREROUTING -d `nvram get wan_ipaddr | sed -e 's;$;/32;'` \
		-j TRIGGER --trigger-type dnat  --trigger-proto all && \
	$IPT_D -A POSTROUTING -s `nvram get lan_ipaddr | sed -e 's;1$;0/24;'` -o ppp0 \
		-j SNAT --to-source `nvram get wan_ipaddr` && \
	$IPT_D -A POSTROUTING -m mark --mark 0x80000000/0x80000000 \
		-j MASQUERADE && \
	###################### mangle ######################
	$IPT_M -A PREROUTING -d `nvram get wan_ipaddr | sed -e 's;$;/32;'` ! -i ppp0 \
		-j MARK --set-xmark 0x80000000/0x80000000 && \
	$IPT_M -A PREROUTING -j CONNMARK --set-xmark 0x0/0xffffffff && \
	$IPT_M -A FORWARD -p tcp -m tcp --tcp-flags SYN,RST SYN \
		-j TCPMSS --clamp-mss-to-pmtu
}

ipset_r() {
	ipset -! -R <<-EOF || return 1
		create ss_spec_wan_ac hash:net hashsize 65536
		$(gen_iplist | sed -e "s/^/add ss_spec_wan_ac /")
		$(sed -e "s/^/add ss_spec_wan_ac /" ${IGNORE_LIST:=/dev/null} 2>/dev/null)
		$(for ip in $WAN_FW_IP; do echo "add ss_spec_wan_ac $ip nomatch"; done)
EOF
	$IPT -N SS_SPEC_WAN_AC && \
	$IPT -A SS_SPEC_WAN_AC -m set --match-set ss_spec_wan_ac dst -j RETURN && \
	$IPT -A SS_SPEC_WAN_AC -j SS_SPEC_WAN_FW
	return $?
}

fw_rule() {
	$IPT -N SS_SPEC_WAN_FW && \
	$IPT -A SS_SPEC_WAN_FW -p tcp \
		-j REDIRECT --to-ports $local_port 2>/dev/null || {
		loger 3 "Can't redirect, please check the iptables."
		exit 1
	}
	return $?
}

restore_dnsamsq() {
	stopservice dnsmasq && \
	/opt/etc/init.d/S56dnsmasq start
}

ac_rule() {
	if [ -n "$LAN_AC_IP" ]; then
		case "${LAN_AC_IP:0:1}" in
			w|W)
				MATCH_SET="-m set --match-set ss_spec_lan_ac src"
				;;
			b|B)
				MATCH_SET="-m set ! --match-set ss_spec_lan_ac src"
				;;
			*)
				loger 3 "Illegal argument \`-a $LAN_AC_IP\`."
				return 2
				;;
		esac
	fi
	IFNAME=$(nvram get lan_ifname 2>/dev/null)
	ipset -! -R <<-EOF || return 1
		create ss_spec_lan_ac hash:net hashsize 65536
		$(for ip in ${LAN_AC_IP:1}; do echo "add ss_spec_lan_ac $ip"; done)
EOF
	$IPT -I PREROUTING 1 ${IFNAME:+-i $IFNAME} -p tcp $EXT_ARGS $MATCH_SET \
		-j SS_SPEC_WAN_AC
	if [ "$OUTPUT" = 1 ]; then
		$IPT -I OUTPUT 1 -p tcp $EXT_ARGS -j SS_SPEC_WAN_AC
	fi
	return $?
}

tp_rule() {
	dmesg | grep -q TPROXY || return 0
	[ -n "$TPROXY" ] || return 0
	ip rule add fwmark 0x01/0x01 table 100
	ip route add local 0.0.0.0/0 dev lo table 100
	local ipt="/opt/sbin/iptables -t mangle"
	$ipt -N SS_SPEC_TPROXY
	$ipt -A SS_SPEC_TPROXY -p udp -m set ! --match-set ss_spec_wan_ac dst \
		-j TPROXY --on-port "$LOCAL_PORT" --tproxy-mark 0x01/0x01
	$ipt -I PREROUTING 1 ${IFNAME:+-i $IFNAME} -p udp $EXT_ARGS $MATCH_SET \
		-j SS_SPEC_TPROXY
	return $?
}

gen_iplist() {
	cat <<-EOF | grep -E "^([0-9]{1,3}\.){3}[0-9]{1,3}"
		0.0.0.0/8
		10.0.0.0/8
		100.64.0.0/10
		127.0.0.0/8
		169.254.0.0/16
		172.16.0.0/12
		192.0.0.0/24
		192.0.2.0/24
		192.88.99.0/24
		192.168.0.0/16
		198.18.0.0/15
		198.51.100.0/24
		203.0.113.0/24
		224.0.0.0/4
		240.0.0.0/4
		255.255.255.255
		$server
		$SERVER
		$WAN_BP_IP
EOF
}

while getopts ":s:l:i:e:a:b:w:ouGfh" arg; do
	case "$arg" in
		s)
			server=$OPTARG
			;;			
		l)
			local_port=$OPTARG
			;;
		i)
			IGNORE_LIST=$OPTARG
			;;
		e)
			EXT_ARGS=$OPTARG
			;;
		a)
			LAN_AC_IP=$OPTARG
			;;
		b)
			WAN_BP_IP=$(for ip in $OPTARG; do echo $ip; done)
			;;
		w)
			WAN_FW_IP=$OPTARG
			;;
		o)
			OUTPUT=1
			;;
		u)
			TPROXY=1
			;;
		G)
			GFWLIST=1
			;;			
		f)
			flush_r
			exit 0
			;;
		h)
			usage 0
			;;
	esac
done

if [ "$GFWLIST" = 1 ]; then
	:	
else
	if [ -z "$server" -o -z "$local_port" ]; then
		usage 2
	fi
fi

if [ "$TPROXY" = 1 ]; then
	SERVER=$server
	LOCAL_PORT=$local_port
fi

if [ -n "$IGNORE_LIST" ]; then
	flush_r && fw_rule && ipset_r && ac_rule && tp_rule
	[ "$?" = 0 ] && loger 6 "Load chnroutes successful" || loger 3 "Start failed!"
	touch a /var/log/chnroutes.lock
	exit $?
else
	flush_r && gfw_r
	[ "$?" = 0 ] && loger 6 "Load gfwlist successful" || loger 3 "Start failed!"
	touch a /var/log/gfwlist.lock
	exit $?
fi